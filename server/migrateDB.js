// migrateDB.js
const sequelize = require('./config/db');
const { Admin, Usuario } = require('./models');

async function migrarBaseDatos() {
  try {
    console.log('üîÑ Iniciando migraci√≥n de base de datos...');
    
    await sequelize.authenticate();
    console.log('‚úÖ Conectado a la base de datos');

    // Opci√≥n 1: Sincronizaci√≥n con alter (conserva datos)
    await sequelize.sync({ alter: true });
    console.log('‚úÖ Base de datos sincronizada con alter');

    // Verificar que las tablas existen y tienen las columnas correctas
    const adminTableInfo = await sequelize.getQueryInterface().describeTable('admins');
    const usuarioTableInfo = await sequelize.getQueryInterface().describeTable('usuarios');

    console.log('üìã Columnas de tabla admins:', Object.keys(adminTableInfo));
    console.log('üìã Columnas de tabla usuarios:', Object.keys(usuarioTableInfo));

    // Verificar si √∫ltimo_acceso existe
    if (!adminTableInfo.ultimo_acceso) {
      console.log('‚ö†Ô∏è Columna ultimo_acceso no existe en admins');
      await sequelize.getQueryInterface().addColumn('admins', 'ultimo_acceso', {
        type: 'DATETIME',
        allowNull: true
      });
      console.log('‚úÖ Columna ultimo_acceso agregada a admins');
    }

    if (!usuarioTableInfo.ultimo_acceso) {
      console.log('‚ö†Ô∏è Columna ultimo_acceso no existe en usuarios');
      await sequelize.getQueryInterface().addColumn('usuarios', 'ultimo_acceso', {
        type: 'DATETIME',
        allowNull: true
      });
      console.log('‚úÖ Columna ultimo_acceso agregada a usuarios');
    }

    console.log('üéâ Migraci√≥n completada exitosamente');
    process.exit(0);

  } catch (error) {
    console.error('‚ùå Error en migraci√≥n:', error);
    
    if (error.name === 'SequelizeDatabaseError') {
      console.log('\nüí° Sugerencias:');
      console.log('1. Verifica que la base de datos existe');
      console.log('2. Verifica las credenciales de conexi√≥n');
      console.log('3. Considera usar { force: true } si no hay datos importantes');
    }
    
    process.exit(1);
  }
}

// Funci√≥n alternativa: recrear todo (BORRA DATOS)
async function recrearBaseDatos() {
  try {
    console.log('‚ö†Ô∏è ADVERTENCIA: Esto eliminar√° todos los datos');
    console.log('üîÑ Recreando base de datos...');
    
    await sequelize.authenticate();
    await sequelize.sync({ force: true });
    
    console.log('‚úÖ Base de datos recreada exitosamente');
    console.log('üîÑ Creando admin inicial...');
    
    // Recrear admin
    await Admin.create({
      nombre: 'Mariano Lopez',
      email: 'marianoo11loopez@gmail.com',
      password: 'Mariano11', // Se hashear√° autom√°ticamente
      rol: 'super_admin',
      activo: true
    });
    
    console.log('‚úÖ Admin recreado exitosamente');
    process.exit(0);
    
  } catch (error) {
    console.error('‚ùå Error al recrear:', error);
    process.exit(1);
  }
}

// Ejecutar migraci√≥n normal por defecto
const args = process.argv.slice(2);
if (args.includes('--force')) {
  recrearBaseDatos();
} else {
  migrarBaseDatos();
}